import { DropdownItem } from './fancy-dropdown.js';
export interface BuildPresetOptions {
    label?: (value: string) => string;
    initialValue?: string;
    initialList?: Array<string | DropdownItem>;
    readOnlyValues?: string[];
    onSelectChange?: (previousValue?: string, newValue?: string) => void | Promise<void>;
    create?: {
        onPopupOpen?: () => void | Promise<void>;
        onBeforeCreate?: (value: string) => boolean | Promise<boolean>;
        /**
         * @returns return string if you want to modify the value
         */
        onAfterCreate?: (value: string) => string | void | Promise<string | void>;
    };
    rename?: {
        onPopupOpen?: () => void | Promise<void>;
        onBeforeRename?: (previousValue: string, newValue: string) => boolean | Promise<boolean>;
        /**
         * @returns return string if you want to modify the value
         */
        onAfterRename?: (previousValue: string, newValue: string) => string | void | Promise<string | void>;
    };
    delete?: {
        onPopupOpen?: () => void | Promise<void>;
        onBeforeDelete?: (value: string) => boolean | Promise<boolean>;
        onAfterDelete?: (value: string) => void | Promise<void>;
    };
}
export declare function buildPresetSelect(selector: string, options?: BuildPresetOptions): {
    select: HTMLSelectElement;
    container: HTMLDivElement;
};
//# sourceMappingURL=preset-select.d.ts.map