import { Message } from './prompt-builder.js';
import { StreamResponse, ExtractedData } from './types/index.js';
export interface GenerateOptions {
    abortController?: AbortController;
    /**
     * Depends on stream mode, "data" or "chunk" would be avaiable.
     */
    onEntry?: (data: ExtractedData | StreamResponse) => void;
    onStart?: (uuid: string) => void;
    /**
     * Depends on stream mode, "data" or "chunk" would be avaiable.
     * If error occurs during request, it will be passed.
     * If "data" and "error" is undefined, it means the request is cancelled.
     */
    onFinish?: (data?: ExtractedData | StreamResponse, error?: Error) => void;
}
export declare class Generator {
    private requestMap;
    constructor();
    abortRequest(requestId: string): void;
    /**
     * @returns return value is not important because request would be finished anyway. So use "options".
     */
    generateRequest(requestParams: {
        profileId: string;
        prompt: string | Message[];
        maxTokens: number;
        custom?: {
            stream?: boolean;
            signal?: AbortSignal;
            extractData?: boolean;
            includePreset?: boolean;
            includeInstruct?: boolean;
        };
    }, options?: GenerateOptions): Promise<string>;
    getActiveRequest(requestId: string): AbortController | undefined;
    getAllActiveRequests(): Map<string, AbortController | undefined>;
}
//# sourceMappingURL=generate.d.ts.map