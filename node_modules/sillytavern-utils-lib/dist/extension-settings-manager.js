export class ExtensionSettingsManager {
    settingsKey;
    defaultSettings;
    constructor(key, defaultSettings) {
        this.settingsKey = key;
        this.defaultSettings = defaultSettings;
    }
    /**
     * If defaultSettings has "version" and "formatVersion" properties, they will be used to track version and format version changes.
     *
     * For example, if you want to show a notification when a new version is released, you can check "result.version.changed".
     *
     * @param [options={}]
     * @param [options.strategy='recursive'] - 'recursive' will migrate old settings with the default settings.
     *
     * For complex settings, you can specify a custom migration strategy. For example, if you change the field name from "old" to "new", you can use:
     * @example
     * [
     *   {
     *     from: 'FORMAT-0.1.0',
     *     to: 'FORMAT-0.1.1',
     *     action: (previous) => {
     *       const data = {
     *         ...previous,
     *         new: previous.old,
     *       };
     *       delete data.old;
     *       return data;
     *     },
     *   },
     * ]
     */
    async initializeSettings(options = {}) {
        const { strategy = 'recursive' } = options;
        const version = this.defaultSettings.version;
        const formatVersion = this.defaultSettings.formatVersion;
        const settings = SillyTavern.getContext().extensionSettings[this.settingsKey];
        const defaultResult = {
            version: {
                changed: false,
                new: version ?? '',
            },
            formatVersion: {
                changed: false,
                new: formatVersion ?? '',
            },
            oldSettings: null,
            newSettings: this.defaultSettings,
        };
        if (!settings) {
            SillyTavern.getContext().extensionSettings[this.settingsKey] = this.defaultSettings;
            this.saveSettings();
            return defaultResult;
        }
        const result = {
            ...defaultResult,
            oldSettings: structuredClone(settings),
            version: {
                changed: false,
                old: settings.version,
                new: settings.version,
            },
            formatVersion: {
                changed: false,
                old: settings.formatVersion,
                new: settings.formatVersion,
            },
        };
        if (strategy === 'recursive') {
            if (version && settings.version !== version) {
                result.version.changed = true;
                result.version.new = version;
                settings.version = version;
            }
            if (formatVersion && formatVersion !== '*' && settings.formatVersion !== formatVersion) {
                result.formatVersion.changed = true;
                result.formatVersion.new = formatVersion;
                settings.formatVersion = formatVersion;
            }
            function initializeRecursively(target, defaults) {
                let anyChange = false;
                // Initialize undefined values from defaults and handle nested objects
                for (const key of Object.keys(defaults)) {
                    if (target[key] === undefined) {
                        target[key] = defaults[key];
                        anyChange = true;
                    }
                    else if (typeof defaults[key] === 'object' && defaults[key] !== null) {
                        target[key] = target[key] || {};
                        if (initializeRecursively(target[key], defaults[key])) {
                            anyChange = true;
                        }
                    }
                }
                return anyChange;
            }
            if (initializeRecursively(settings, this.defaultSettings) ||
                result.version.changed ||
                result.formatVersion.changed) {
                this.saveSettings();
            }
        }
        else if (Array.isArray(strategy)) {
            if (version && !settings.version) {
                settings.version = version;
                result.version.changed = true;
                result.version.new = version;
            }
            if (formatVersion && !settings.formatVersion) {
                settings.formatVersion = formatVersion;
                result.formatVersion.changed = true;
                result.formatVersion.new = formatVersion;
            }
            let currentSettings = structuredClone(settings);
            let currentFormatVersion = settings.formatVersion;
            try {
                let upgraded;
                do {
                    upgraded = false;
                    // First try to find an exact version match
                    let exactMatch = strategy.find((change) => change.from === currentFormatVersion);
                    if (exactMatch && exactMatch.to > currentFormatVersion) {
                        currentSettings = await exactMatch.action(currentSettings);
                        currentFormatVersion = exactMatch.to;
                        // @ts-ignore
                        currentSettings.formatVersion = exactMatch.to;
                        upgraded = true;
                    }
                    else {
                        // If no exact match found, try wildcard
                        for (const change of strategy) {
                            if (change.from === '*' && change.to > currentFormatVersion && currentFormatVersion !== change.to) {
                                currentSettings = await change.action(currentSettings);
                                currentFormatVersion = change.to;
                                // @ts-ignore
                                currentSettings.formatVersion = change.to;
                                upgraded = true;
                                break; // Only take the first wildcard match per iteration
                            }
                        }
                    }
                } while (upgraded); // Continue upgrading while changes are being made
                // Only mark as changed if any upgrades occurred
                if (currentFormatVersion !== settings.formatVersion) {
                    result.formatVersion.changed = true;
                    result.formatVersion.new = currentFormatVersion;
                    const defaultVersion = this.defaultSettings.version;
                    if (defaultVersion) {
                        // @ts-ignore
                        currentSettings.version = defaultVersion;
                    }
                }
                if (result.formatVersion.changed) {
                    for (const key of Object.keys(settings)) {
                        delete settings[key];
                    }
                    Object.assign(settings, currentSettings);
                    this.saveSettings();
                }
            }
            catch (error) {
                console.error(`Failed to apply version changes:`, error);
                throw new Error(`Version migration failed: ${error instanceof Error ? error.message : error}`, {
                    cause: error,
                });
            }
        }
        result.newSettings = settings;
        return result;
    }
    getSettings() {
        return SillyTavern.getContext().extensionSettings[this.settingsKey];
    }
    updateSetting(key, value) {
        SillyTavern.getContext().extensionSettings[this.settingsKey][key] = value;
        this.saveSettings();
    }
    saveSettings() {
        SillyTavern.getContext().saveSettingsDebounced();
    }
    resetSettings() {
        SillyTavern.getContext().extensionSettings[this.settingsKey] = this.defaultSettings;
        this.saveSettings();
    }
}
//# sourceMappingURL=extension-settings-manager.js.map