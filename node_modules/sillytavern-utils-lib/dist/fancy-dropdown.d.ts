import * as FuseGlobal from 'fuse.js';
export interface DropdownItem {
    value: string;
    label: string;
}
export interface FancyDropdownOptions {
    placeholderText?: string;
    initialValues?: string[];
    initialList?: Array<string | DropdownItem>;
    onSelectChange?: (previousValues: string[], newValues: string[]) => void | Promise<void>;
    closeOnSelect?: boolean;
    /**
     * default true
     */
    multiple?: boolean;
    /**
     * Optional callback to control selection changes. Return false to prevent selection.
     */
    onBeforeSelection?: (currentValues: string[], proposedValues: string[]) => boolean | Promise<boolean>;
    enableSearch?: boolean;
    searchPlaceholderText?: string;
    searchNoResultsText?: string;
    searchDebounceMs?: number;
    searchFuseOptions?: FuseGlobal.IFuseOptions<DropdownItem | string>;
}
/**
 * Builds a collapsing dropdown menu that allows multiple selections with checkmarks and optional fuzzy search.
 */
export declare function buildFancyDropdown(selector: string | HTMLElement, options?: FancyDropdownOptions): {
    container: HTMLElement;
    dropdownTrigger: HTMLDivElement;
    dropdownList: HTMLDivElement;
    getValues: () => string[];
    setValues: (values: string[]) => void;
    getOptions: () => DropdownItem[];
    addOption: (value: string | DropdownItem, select?: boolean) => void;
    removeOption: (valueToRemove: string) => void;
    selectAll: () => void;
    deselectAll: () => void;
    disable: () => void;
    enable: () => void;
    open: () => void;
    close: () => void;
    toggle: () => void;
};
//# sourceMappingURL=fancy-dropdown.d.ts.map