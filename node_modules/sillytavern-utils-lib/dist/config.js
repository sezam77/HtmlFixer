// @ts-ignore
import { persona_description_positions, renderStoryString } from '../../../../power-user.js';
import { name1, name2, getMaxContextSize, parseMesExamples, baseChatReplace, chat_metadata, extension_prompt_types, this_chid, characters, depth_prompt_role_default, depth_prompt_depth_default, main_api, systemUserName, system_avatar,
// @ts-ignore
 } from '../../../../../script.js';
import { createWorldInfoEntry, world_info_include_names, wi_anchor_position, selected_world_info, METADATA_KEY, world_info, world_names,
// @ts-ignore
 } from '../../../../world-info.js';
// @ts-ignore
import { formatInstructModeExamples, formatInstructModeSystemPrompt } from '../../../../instruct-mode.js';
// @ts-ignore
import { appendFileContent } from '../../../../chats.js';
import { getPromptRole, prepareOpenAIMessages, setOpenAIMessages, setOpenAIMessageExamples, formatWorldInfo, getPromptPosition,
// @ts-ignore
 } from '../../../../openai.js';
// @ts-ignore
import { metadata_keys } from '../../../../authors-note.js';
// @ts-ignore
import { getGroupDepthPrompts, selected_group, is_group_generating, groups } from '../../../../group-chats.js';
// @ts-ignore
import { regex_placement, getRegexedString, runRegexScript } from '../../../regex/engine.js';
// @ts-ignore
import { getCharaFilename } from '../../../../utils.js';
// @ts-ignore
import { commonEnumProviders } from '../../../../slash-commands/SlashCommandCommonEnumsProvider.js';
export async function st_runCommandCallback(command, ...args) {
    // @ts-ignore
    await SillyTavern.getContext().SlashCommandParser.commands[command].callback(...args);
}
/**
 * Sends an echo message using the SlashCommandParser's echo command.
 */
export async function st_echo(severity, message, { escapeHtml = true } = {}) {
    await st_runCommandCallback('echo', { severity: severity, escapeHtml: Boolean(escapeHtml).toString() }, message);
}
export function st_getMaxContextSize(overrideResponseLength) {
    return getMaxContextSize(overrideResponseLength);
}
export function st_parseMesExamples(examplesStr, isInstruct) {
    return parseMesExamples(examplesStr, isInstruct);
}
export function st_baseChatReplace(value, name1, name2) {
    return baseChatReplace(value, name1, name2);
}
export function st_formatInstructModeExamples(mesExamplesArray, name1, name2) {
    return formatInstructModeExamples(mesExamplesArray, name1, name2);
}
export function st_formatInstructModeSystemPrompt(systemPrompt, customInstruct) {
    return formatInstructModeSystemPrompt(systemPrompt, customInstruct);
}
export function st_renderStoryString(params, { customStoryString, customInstructSettings, } = {}) {
    return renderStoryString(params, { customStoryString, customInstructSettings });
}
export function st_getPromptRole(role) {
    return getPromptRole(role);
}
export function st_getAuthorNote() {
    return {
        prompt: chat_metadata[metadata_keys.prompt],
        interval: chat_metadata[metadata_keys.interval],
        position: chat_metadata[metadata_keys.position],
        depth: chat_metadata[metadata_keys.depth],
        role: chat_metadata[metadata_keys.role],
    };
}
export function st_getGroupDepthPrompts(groupId, characterId) {
    return getGroupDepthPrompts(groupId, characterId);
}
export function st_prepareOpenAIMessages({ name2, charDescription, charPersonality, Scenario, worldInfoBefore, worldInfoAfter, bias, type, quietPrompt, quietImage, extensionPrompts, cyclePrompt, systemPromptOverride, jailbreakPromptOverride, personaDescription, messages, messageExamples, }, dryRun) {
    return prepareOpenAIMessages({
        name2,
        charDescription,
        charPersonality,
        Scenario,
        worldInfoBefore,
        worldInfoAfter,
        bias,
        type,
        quietPrompt,
        quietImage,
        cyclePrompt,
        systemPromptOverride,
        jailbreakPromptOverride,
        personaDescription,
        extensionPrompts,
        messages,
        messageExamples,
    }, dryRun);
}
export function st_setOpenAIMessages(chat) {
    return setOpenAIMessages(chat);
}
export function st_setOpenAIMessageExamples(mesExamplesArray) {
    return setOpenAIMessageExamples(mesExamplesArray);
}
export function st_getRegexedString(rawString, placement, { characterOverride, isMarkdown, isPrompt, isEdit, depth, }) {
    return getRegexedString(rawString, placement, { characterOverride, isMarkdown, isPrompt, isEdit, depth });
}
export function st_runRegexScript(regexScript, rawString, { characterOverride = null } = {}) {
    return runRegexScript(regexScript, rawString, { characterOverride });
}
export async function st_appendFileContent(message, messageText) {
    return await appendFileContent(message, messageText);
}
export function st_formatWorldInfo(value, { wiFormat, } = {}) {
    return formatWorldInfo(value, { wiFormat });
}
export function st_getPromptPosition(position) {
    return getPromptPosition(position);
}
export function st_getCharaFilename(chid, { manualAvatarKey, } = {}) {
    return getCharaFilename(chid, { manualAvatarKey });
}
export function st_createWorldInfoEntry(_name, data) {
    return createWorldInfoEntry(_name, data);
}
export { persona_description_positions, name1, name2, world_info_include_names, wi_anchor_position, selected_world_info, METADATA_KEY as WI_METADATA_KEY, world_info, extension_prompt_types, selected_group, is_group_generating, groups, this_chid, characters, depth_prompt_role_default, depth_prompt_depth_default, main_api, regex_placement, systemUserName, system_avatar, commonEnumProviders, world_names, };
//# sourceMappingURL=config.js.map