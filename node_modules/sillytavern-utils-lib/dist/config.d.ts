import { persona_description_positions } from '../../../../power-user.js';
import { name1, name2, extension_prompt_types, this_chid, characters, depth_prompt_role_default, depth_prompt_depth_default, main_api, systemUserName, system_avatar } from '../../../../../script.js';
import { world_info_include_names, wi_anchor_position, selected_world_info, METADATA_KEY, world_info, world_names } from '../../../../world-info.js';
import { selected_group, is_group_generating, groups } from '../../../../group-chats.js';
import { regex_placement } from '../../../regex/engine.js';
import { commonEnumProviders } from '../../../../slash-commands/SlashCommandCommonEnumsProvider.js';
import { InstructSettings } from './types/instruct.js';
import { WIEntry } from './types/world-info.js';
import { RegexScriptData } from './types/regex.js';
export declare function st_runCommandCallback(command: string, ...args: any[]): Promise<void>;
/**
 * Sends an echo message using the SlashCommandParser's echo command.
 */
export declare function st_echo(severity: string, message: string, { escapeHtml }?: {
    escapeHtml?: boolean | undefined;
}): Promise<void>;
export declare function st_getMaxContextSize(overrideResponseLength?: number): number;
export declare function st_parseMesExamples(examplesStr: string, isInstruct: boolean): string[];
export declare function st_baseChatReplace(value: any, name1: any, name2: any): any;
export declare function st_formatInstructModeExamples(mesExamplesArray: string[], name1: string, name2: string): string[];
export declare function st_formatInstructModeSystemPrompt(systemPrompt: string, customInstruct?: InstructSettings): string;
export declare function st_renderStoryString(params: object, { customStoryString, customInstructSettings, }?: {
    customStoryString?: string;
    customInstructSettings?: InstructSettings;
}): string;
export declare function st_getPromptRole(role: number): string;
export declare function st_getAuthorNote(): {
    prompt: string;
    interval: number;
    position: number;
    depth: number;
    role: number;
};
export declare function st_getGroupDepthPrompts(groupId: string, characterId: number): {
    depth: number;
    text: string;
    role: string;
}[];
export declare function st_prepareOpenAIMessages({ name2, charDescription, charPersonality, Scenario, worldInfoBefore, worldInfoAfter, bias, type, quietPrompt, quietImage, extensionPrompts, cyclePrompt, systemPromptOverride, jailbreakPromptOverride, personaDescription, messages, messageExamples, }: {
    name2: string;
    charDescription: string;
    charPersonality: string;
    Scenario: string;
    worldInfoBefore: string;
    worldInfoAfter: string;
    bias: string;
    type: string;
    quietPrompt?: string;
    quietImage?: string;
    cyclePrompt: string;
    systemPromptOverride: string;
    jailbreakPromptOverride: string;
    personaDescription: string;
    extensionPrompts: object;
    messages: object[];
    messageExamples: string[];
}, dryRun: any): Promise<any[]>;
export declare function st_setOpenAIMessages(chat: object[]): object[];
export declare function st_setOpenAIMessageExamples(mesExamplesArray: string[]): string[];
export declare function st_getRegexedString(rawString: string, placement: regex_placement, { characterOverride, isMarkdown, isPrompt, isEdit, depth, }: {
    characterOverride?: string;
    isMarkdown?: boolean;
    isPrompt?: boolean;
    isEdit?: boolean;
    depth?: number;
}): string;
export declare function st_runRegexScript(regexScript: RegexScriptData, rawString: string, { characterOverride }?: {
    characterOverride?: any;
}): string;
export declare function st_appendFileContent(message: object, messageText: string): Promise<string>;
export declare function st_formatWorldInfo(value: string, { wiFormat, }?: {
    wiFormat?: string;
}): string;
export declare function st_getPromptPosition(position: number): string | false;
export declare function st_getCharaFilename(chid?: number | null, { manualAvatarKey, }?: {
    manualAvatarKey?: string | null;
}): string | null;
export declare function st_createWorldInfoEntry(_name: string, data: {
    entries: Record<number, WIEntry>;
}): WIEntry | undefined;
export { persona_description_positions, name1, name2, world_info_include_names, wi_anchor_position, selected_world_info, METADATA_KEY as WI_METADATA_KEY, world_info, extension_prompt_types, selected_group, is_group_generating, groups, this_chid, characters, depth_prompt_role_default, depth_prompt_depth_default, main_api, regex_placement, systemUserName, system_avatar, commonEnumProviders, world_names, };
//# sourceMappingURL=config.d.ts.map