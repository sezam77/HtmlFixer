import { DropdownItem } from './fancy-dropdown.js';
import Sortable from 'sortablejs';
export interface SortableListItemData {
    id: string;
    label: string;
    enabled: boolean;
    canDelete?: boolean;
    canToggle?: boolean;
    showSelect?: boolean;
    canSelect?: boolean;
    selectOptions?: DropdownItem[];
    selectValue?: string;
}
export interface SortableListOptions {
    initialList?: SortableListItemData[];
    showToggleButton?: boolean;
    showDeleteButton?: boolean;
    showSelectInput?: boolean;
    /**
     * Custom function to render the label part of an item.
     * Allows for adding extra elements or styling within the label area.
     * Default just sets textContent.
     */
    renderLabel?: (labelContainer: HTMLElement, itemData: SortableListItemData) => void;
    /**
     * Called after the order changes via drag-and-drop.
     * Passes the new array of item IDs in their order.
     */
    onOrderChange?: (newItemOrderIds: string[]) => void | Promise<void>;
    /**
     * Called when the toggle button is clicked.
     * Passes the item ID and the *new* enabled state.
     */
    onToggle?: (itemId: string, newState: boolean) => void | Promise<void>;
    /**
     * Called when the delete button is clicked.
     * IMPORTANT: This callback should handle confirmation (if needed)
     * and the actual deletion logic.
     * Return `true` if the item should be removed from the UI, `false` otherwise.
     */
    onDelete?: (itemId: string) => boolean | Promise<boolean>;
    /** Called when the select input value changes. */
    onSelectChange?: (itemId: string, newValue: string) => void | Promise<void>;
    /**
     * Options passed directly to SortableJS instance.
     * See https://github.com/SortableJS/Sortable#options
     */
    sortableJsOptions?: Sortable.Options;
}
export declare function buildSortableList(selector: string | HTMLElement, options?: SortableListOptions): {
    /** Gets the current list of items with their data. */
    getList: () => SortableListItemData[];
    /** Gets the current order of item IDs. */
    getOrder: () => string[];
    /** Adds a new item to the list. */
    addItem: (itemData: SortableListItemData, index?: number) => void;
    removeItem: (itemId: string) => void;
    /** Updates the data and visuals for an existing item. */
    updateItem: (itemId: string, updates: Partial<Omit<SortableListItemData, "id">>) => void;
    /** Replaces the entire list content. */
    setList: (newListData: SortableListItemData[]) => void;
    /** Destroys the SortableJS instance and removes elements. */
    destroy: () => void;
    /** Gets the underlying SortableJS instance for advanced manipulation (use with caution). */
    getSortableInstance: () => Sortable | null;
};
//# sourceMappingURL=sortable-list.d.ts.map